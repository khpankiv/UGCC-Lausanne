// scripts/render-pages.js
// –°—Ç–∞—Ç–∏—á–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä Nunjucks —ñ–∑ JSON-–¥–∞–Ω–∏—Ö (articles, schedule)
const fs = require('fs');
const path = require('path');
const nunjucks = require('nunjucks');
const glob = require('glob');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —à–∞–±–ª–æ–Ω—ñ–≤
const env = nunjucks.configure('templates', { autoescape: true });
env.addFilter('truncate', (str, len = 150) => {
  if (!str || typeof str !== 'string') return '';
  return str.length > len ? str.slice(0, len).replace(/\s+\S*$/, '') + '‚Ä¶' : str;
});

// –ú–æ–≤–∏
const languages = [
  { code: '', dir: '.' },
  { code: 'en', dir: 'en' },
  { code: 'fr', dir: 'fr' },
];

// –î–∞–Ω—ñ —Ö–µ–¥–µ—Ä–∞ —ñ —Ñ—É—Ç–µ—Ä–∞
const headerData = JSON.parse(fs.readFileSync(path.join(__dirname, '../pages/header.json'), 'utf-8'));
const footerData = JSON.parse(fs.readFileSync(path.join(__dirname, '../pages/footer.json'), 'utf-8'));

// ===== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π —ñ —Ä–æ–∑–∫–ª–∞–¥—É =====
function loadSections() {
  let articles = [];
  let schedule = [];

  try {
    articles = JSON.parse(fs.readFileSync(path.join(__dirname, '../data/articles.json'), 'utf-8'));
    console.log(`üìö –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${articles.length}`);
  } catch {
    console.warn('‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ data/articles.json');
  }

  try {
    schedule = JSON.parse(fs.readFileSync(path.join(__dirname, '../data/schedule.json'), 'utf-8'));
    console.log(`üìÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –ø–æ–¥—ñ–π —Ä–æ–∑–∫–ª–∞–¥—É: ${schedule.length}`);
  } catch {
    console.warn('‚ö†Ô∏è  –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ data/schedule.json');
  }

  // –ì—Ä—É–ø—É—î–º–æ —Å—Ç–∞—Ç—Ç—ñ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
  const sections = { uk: { hero: [], news: [], spiritual: [], community: [], schedule } };

  for (const a of articles) {
    const lang = (a.language || 'uk').trim();
    const type = (a.category || '').trim();

    if (!sections[lang]) sections[lang] = { hero: [], news: [], spiritual: [], community: [], schedule };
    if (type && sections[lang][type]) sections[lang][type].push(a);
  }

  return sections;
}

// ===== –û—Å–Ω–æ–≤–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä =====
(async function renderAll() {
  const pagesDir = path.join(__dirname, '../pages');
  const pageJsonFiles = glob.sync(pagesDir.replace(/\\/g, '/') + '/*/page.json');
  console.log('üìÑ –ó–Ω–∞–π–¥–µ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏:', pageJsonFiles.map(p => path.relative(path.join(__dirname, '..'), p)));

  const sheetSections = loadSections();

  for (const pageFile of pageJsonFiles) {
    const pageName = path.basename(path.dirname(pageFile));
    const pageData = JSON.parse(fs.readFileSync(pageFile, 'utf-8'));

    for (const lang of languages) {
      const langKey = lang.code || 'uk';
      const langData = pageData[langKey] || {};
      const header = headerData[langKey] || {};
      const footer = footerData[langKey] || {};
      const sections = sheetSections[langKey] || sheetSections.uk;

      let outDir, outPath;
      if (pageName === 'index' && lang.dir === '.') {
        outDir = '..';
        outPath = path.join(__dirname, outDir, 'index.html');
      } else if (pageName === 'index') {
        outDir = path.join('..', lang.dir);
        outPath = path.join(__dirname, outDir, 'index.html');
      } else {
        outDir = lang.dir === '.' ? path.join('..', pageName) : path.join('..', lang.dir, pageName);
        outPath = path.join(__dirname, outDir, 'index.html');
      }

      fs.mkdirSync(path.join(__dirname, outDir), { recursive: true });

      let html;
      try {
        html = nunjucks.render('base.njk', {
          ...langData,
          page: pageName,
          lang: langKey,
          header,
          footer,
          sections
        });
      } catch (e) {
        html = `<!doctype html><meta charset="utf-8"><pre>Render error: ${e.message}</pre>`;
      }

      fs.writeFileSync(outPath, String(html || ''), 'utf-8');
      console.log(`‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${outPath}`);
    }
  }

  console.log('üèÅ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.');
})();
